CREATE SCHEMA IF NOT EXISTS open_transfer
    AUTHORIZATION postgres;

COMMENT ON SCHEMA open_transfer
    IS 'Open transfer database';
BEGIN;
\c open_transfer;

-- Policyholder Table
CREATE TABLE IF NOT EXISTS open_transfer.policyholder (
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY (INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1),
    cpr VARCHAR(10) UNIQUE,  -- Make cpr unique
    cvr VARCHAR(8) UNIQUE,  -- Make cvr unique
    firstname VARCHAR(35) NULL,
    middlename VARCHAR(35),
    lastname VARCHAR(35) NULL,
    company_name VARCHAR(255) NULL,  -- Allow NULL values for individuals
    holder_type VARCHAR(20) CHECK (holder_type IN ('PERSON', 'COMPANY')) NOT NULL,
    address_line1 VARCHAR(255) NOT NULL,
    address_line2 VARCHAR(255) NOT NULL,
    postal_code VARCHAR(10) NOT NULL,
    city VARCHAR(50) NOT NULL,
    state_or_region VARCHAR(50) NOT NULL,
    country VARCHAR(50) NOT NULL,
    CONSTRAINT policyholder_pkey PRIMARY KEY (id),
    
    -- Enforce that if cvr is provided, company_name must not be null
    CONSTRAINT chk_cvr_company_name CHECK (
        (cvr IS NOT NULL AND company_name IS NOT NULL) OR
        (cvr IS NULL)
    ),

    -- Enforce that if cpr is provided, firstname and lastname must not be null
    CONSTRAINT chk_cpr_names CHECK (
        (cpr IS NOT NULL AND firstname IS NOT NULL AND lastname IS NOT NULL) OR
        (cpr IS NULL)
    ),
    
    -- Enforce that company_name can only be non-null for companies
    CONSTRAINT chk_company_name CHECK (
        (holder_type = 'COMPANY' AND company_name IS NOT NULL) OR
        (holder_type = 'PERSON' AND company_name IS NULL)
    )
);

-- Transferring Provider Table
CREATE TABLE IF NOT EXISTS open_transfer.transferring_provider (
    cvr VARCHAR(8) PRIMARY KEY NOT NULL,
    company_name VARCHAR(50) NOT NULL
);

-- Receiving Provider Table
CREATE TABLE IF NOT EXISTS open_transfer.receiving_provider (
    cvr VARCHAR(8) PRIMARY KEY NOT NULL,
    company_name VARCHAR(50) NOT NULL
);

-- Taxation Scheme Table
CREATE TABLE IF NOT EXISTS open_transfer.taxation_scheme (
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    scheme_type VARCHAR(50) NOT NULL,
    taxation_code VARCHAR(10) UNIQUE NULL,
    friendly_name TEXT NOT NULL,
    CONSTRAINT taxation_scheme_pkey PRIMARY KEY (id)
);

-- Pension Scheme Table
CREATE TABLE IF NOT EXISTS open_transfer.pension_scheme (
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    taxation_scheme_id int NOT NULL,
    pension_type VARCHAR(50) NOT NULL,
    establishment_date DATE NOT NULL,
    CONSTRAINT pension_scheme_pkey PRIMARY KEY (id),
    CONSTRAINT fk_taxation_scheme_id FOREIGN KEY (taxation_scheme_id) REFERENCES open_transfer.taxation_scheme(id)
);

-- Fund Transfer Table (formerly Transfer)
CREATE TABLE IF NOT EXISTS open_transfer.fund_transfer (
    id UUID PRIMARY KEY NOT NULL,
    policyholder_id int,
    transferring_cvr VARCHAR(8) NOT NULL,
    receiving_cvr VARCHAR(8) NOT NULL,
    scheme_id INT NOT NULL,
    amount DECIMAL(18, 2),
    transfer_date TIMESTAMP,
    transfer_type VARCHAR(50),
    fees_deducted DECIMAL(18, 2),
    CONSTRAINT fk_policyholder_id FOREIGN KEY (policyholder_id) REFERENCES open_transfer.policyholder(id),
    CONSTRAINT fk_transferring_cvr FOREIGN KEY (transferring_cvr) REFERENCES open_transfer.transferring_provider(cvr),
    CONSTRAINT fk_receiving_cvr FOREIGN KEY (receiving_cvr) REFERENCES open_transfer.receiving_provider(cvr),
    CONSTRAINT fk_scheme_id FOREIGN KEY (scheme_id) REFERENCES open_transfer.pension_scheme(id)
);

-- Employer Agreement Table
CREATE TABLE IF NOT EXISTS open_transfer.employer_agreement (
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    policyholder_id int,
    cvr VARCHAR(8) NOT NULL,
    consent_status VARCHAR(50) CHECK (consent_status IN ('pending', 'granted', 'revoked')) NOT NULL,
    CONSTRAINT employer_agreement_pkey PRIMARY KEY (id),
    CONSTRAINT fk_employer_cvr FOREIGN KEY (cvr) REFERENCES open_transfer.transferring_provider(cvr),
    CONSTRAINT fk_cvr FOREIGN KEY (cvr) REFERENCES open_transfer.receiving_provider(cvr),
    CONSTRAINT fk_policyholder_id FOREIGN KEY (policyholder_id) REFERENCES open_transfer.policyholder(id)
);

-- Indexes and Unique Constraints
CREATE INDEX idx_policyholder_id ON open_transfer.policyholder(id);
CREATE INDEX idx_policyholder_cpr ON open_transfer.policyholder(cpr);
CREATE INDEX idx_policyholder_cvr ON open_transfer.policyholder(cvr);
CREATE INDEX idx_transferring_provider_cvr ON open_transfer.transferring_provider(cvr);
CREATE INDEX idx_receiving_provider_cvr ON open_transfer.receiving_provider(cvr);
CREATE INDEX idx_pension_scheme_id ON open_transfer.pension_scheme(id);
CREATE INDEX idx_fund_transfer_transferring_cvr ON open_transfer.fund_transfer(transferring_cvr);
CREATE INDEX idx_fund_transfer_receiving_cvr ON open_transfer.fund_transfer(receiving_cvr);
CREATE INDEX idx_fund_transfer_scheme_id ON open_transfer.fund_transfer(scheme_id);

/* ------------- DEFAULT DATA ------------- */
-- Insert base taxation schemes with taxation codes
INSERT INTO open_transfer.taxation_scheme (scheme_type, taxation_code, friendly_name)
VALUES 
    ('taxable', '5', 'Kapitalpension (Taxable)'),
    ('tax-exempt', '7', 'Ratepension (Tax-Exempt)'),
    ('tax-exempt', '8', 'Aldersopsparing'),
    ('tax-exempt', '9', 'Arbejdsgiverordning'),
    ('taxable', '10', 'Selvpensioneringsordning (Self-Pension Savings)'),
    ('taxable', '20', 'Ophørspension (Termination Pension)'),
    ('taxable', '25', 'Udenlandsk Pension (Foreign Pension Taxable Upon Transfer)');

-- Insert data into policyholder
INSERT INTO open_transfer.policyholder 
(cpr, cvr, firstname, middlename, lastname, company_name, holder_type, address_line1, address_line2, postal_code, city, state_or_region, country) 
VALUES 
    ('1234567890', NULL, 'Anders', 'M.', 'Jensen', NULL, 'PERSON', 'Nørregade 10', '', '1000', 'Copenhagen', 'Hovedstaden', 'Denmark'),
    ('2345678901', NULL, 'Lars', NULL, 'Hansen', NULL, 'PERSON', 'Østergade 12', '', '8000', 'Aarhus', 'Midtjylland', 'Denmark'),
    (NULL, '87654321', NULL, NULL, NULL, 'Nordic Pensions A/S', 'COMPANY', 'Vestergade 25', '', '6000', 'Kolding', 'Syddanmark', 'Denmark');

-- Insert data into transferring_provider
INSERT INTO open_transfer.transferring_provider (cvr, company_name)
VALUES 
    ('12345678', 'PensionDanmark'),
    ('23456789', 'Industriens Pension'),
    ('34567890', 'PFA Pension');

-- Insert data into receiving_provider
INSERT INTO open_transfer.receiving_provider (cvr, company_name)
VALUES 
    ('12345678', 'PensionDanmark'),
    ('23456789', 'Industriens Pension'),
    ('34567890', 'PFA Pension'),
    ('45678901', 'Danica Pension'),
    ('56789012', 'Velliv'),
    ('67890123', 'Topdanmark Pension');

-- Insert data into pension_scheme
INSERT INTO open_transfer.pension_scheme (taxation_scheme_id, pension_type, establishment_date)
VALUES 
    (1, 'Kapitalpension', '2005-06-15'),
    (2, 'Ratepension', '2010-03-20'),
    (3, 'Aldersopsparing', '2018-07-01');

-- Insert data into employer_agreement
INSERT INTO open_transfer.employer_agreement (policyholder_id, cvr, consent_status)
VALUES 
    (1, '12345678', 'granted'),
    (2, '23456789', 'pending'),
    (3, '34567890', 'revoked');

-- Insert data into fund_transfer
INSERT INTO open_transfer.fund_transfer (id, policyholder_id, transferring_cvr, receiving_cvr, scheme_id, amount, transfer_date, transfer_type, fees_deducted)
VALUES 
    ('550e8400-e29b-41d4-a716-446655440000', 1, '12345678', '45678901', 1, 150000.00, '2025-02-01 10:30:00', 'pension transfer', 500.00),
    ('550e8400-e29b-41d4-a716-446655440001', 2, '23456789', '56789012', 2, 75000.00, '2025-02-15 14:00:00', 'pension transfer', 300.00),
    ('550e8400-e29b-41d4-a716-446655440002', 3, '34567890', '67890123', 3, 120000.00, '2025-02-28 09:45:00', 'pension transfer', 400.00);


