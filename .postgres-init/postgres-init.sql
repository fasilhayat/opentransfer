CREATE SCHEMA IF NOT EXISTS open_transfer
    AUTHORIZATION postgres;

COMMENT ON SCHEMA open_transfer
    IS 'Open transfer database';
BEGIN;
\c open_transfer;

-- Policyholder Table
CREATE TABLE IF NOT EXISTS open_transfer.policyholder (
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    cpr VARCHAR(10) UNIQUE,  -- Make cpr unique
    cvr VARCHAR(8) UNIQUE,  -- Make cvr unique
    firstname VARCHAR(255) NOT NULL,
    middlename VARCHAR(255),
    lastname VARCHAR(255) NOT NULL,
    company_name VARCHAR(255) NOT NULL,
    holder_type VARCHAR(20) CHECK (holder_type IN ('PERSON', 'COMPANY')) NOT NULL,
    address_line1 VARCHAR(255) NOT NULL,
    address_line2 VARCHAR(255) NOT NULL,
    postal_code VARCHAR(10) NOT NULL,
    city VARCHAR(255) NOT NULL,
    state_or_region VARCHAR(255) NOT NULL,
    country VARCHAR(255) NOT NULL,
    CONSTRAINT policyholder_pkey PRIMARY KEY (id)
);

-- Transferring Provider Table
CREATE TABLE IF NOT EXISTS open_transfer.transferring_provider (
    cvr VARCHAR(8) PRIMARY KEY NOT NULL,
    company_name VARCHAR(255) NOT NULL
);

-- Receiving Provider Table
CREATE TABLE IF NOT EXISTS open_transfer.receiving_provider (
    cvr VARCHAR(8) PRIMARY KEY NOT NULL,
    company_name VARCHAR(255) NOT NULL
);

-- Pension Scheme Table
CREATE TABLE IF NOT EXISTS open_transfer.pension_scheme (
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    taxation_scheme VARCHAR(50) NOT NULL,
    pension_type VARCHAR(255) NOT NULL,
    establishment_date DATE NOT NULL,
    CONSTRAINT pension_scheme_pkey PRIMARY KEY (id)
);

-- Taxation Scheme Table
CREATE TABLE IF NOT EXISTS open_transfer.taxation_scheme (
    scheme_type VARCHAR(50) PRIMARY KEY NOT NULL,
    friendly_name TEXT NOT NULL
);

-- Fund Transfer Table (formerly Transfer)
CREATE TABLE IF NOT EXISTS open_transfer.fund_transfer (
    id UUID PRIMARY KEY NOT NULL,
    policyholder_id int,
    transferring_cvr VARCHAR(8) NOT NULL,
    receiving_cvr VARCHAR(8) NOT NULL,
    scheme_id INT NOT NULL,
    amount DECIMAL(18, 2),
    transfer_date TIMESTAMP,
    transfer_type VARCHAR(50),
    fees_deducted DECIMAL(18, 2),
    CONSTRAINT fk_policyholder_id FOREIGN KEY (policyholder_id) REFERENCES open_transfer.policyholder(id),
    CONSTRAINT fk_transferring_cvr FOREIGN KEY (transferring_cvr) REFERENCES open_transfer.transferring_provider(cvr),
    CONSTRAINT fk_receiving_cvr FOREIGN KEY (receiving_cvr) REFERENCES open_transfer.receiving_provider(cvr),
    CONSTRAINT fk_scheme_id FOREIGN KEY (scheme_id) REFERENCES open_transfer.pension_scheme(id)
);

-- Employer Agreement Table
CREATE TABLE IF NOT EXISTS open_transfer.employer_agreement (
    id int NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    policyholder_id int,
    cvr VARCHAR(8) NOT NULL,
    consent_status VARCHAR(50) CHECK (consent_status IN ('pending', 'granted', 'revoked')) NOT NULL,
    CONSTRAINT employer_agreement_pkey PRIMARY KEY (id),
    CONSTRAINT fk_employer_cvr FOREIGN KEY (cvr) REFERENCES open_transfer.transferring_provider(cvr),
    CONSTRAINT fk_cvr FOREIGN KEY (cvr) REFERENCES open_transfer.receiving_provider(cvr),
    CONSTRAINT fk_policyholder_id FOREIGN KEY (policyholder_id) REFERENCES open_transfer.policyholder(id)
);

-- Indexes and Unique Constraints
CREATE INDEX idx_policyholder_id ON open_transfer.policyholder(id);
CREATE INDEX idx_policyholder_cpr ON open_transfer.policyholder(cpr);
CREATE INDEX idx_policyholder_cvr ON open_transfer.policyholder(cvr);
CREATE INDEX idx_transferring_provider_cvr ON open_transfer.transferring_provider(cvr);
CREATE INDEX idx_receiving_provider_cvr ON open_transfer.receiving_provider(cvr);
CREATE INDEX idx_pension_scheme_id ON open_transfer.pension_scheme(id);
CREATE INDEX idx_fund_transfer_transferring_cvr ON open_transfer.fund_transfer(transferring_cvr);
CREATE INDEX idx_fund_transfer_receiving_cvr ON open_transfer.fund_transfer(receiving_cvr);
CREATE INDEX idx_fund_transfer_scheme_id ON open_transfer.fund_transfer(scheme_id);
